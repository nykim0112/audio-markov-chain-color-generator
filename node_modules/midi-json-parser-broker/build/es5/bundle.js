(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@babel/runtime/helpers/asyncToGenerator'), require('@babel/runtime/regenerator'), require('broker-factory')) :
    typeof define === 'function' && define.amd ? define(['exports', '@babel/runtime/helpers/asyncToGenerator', '@babel/runtime/regenerator', 'broker-factory'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.midiJsonParserBroker = {}, global._asyncToGenerator, global._regeneratorRuntime, global.brokerFactory));
})(this, (function (exports, _asyncToGenerator, _regeneratorRuntime, brokerFactory) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    var _asyncToGenerator__default = /*#__PURE__*/_interopDefaultLegacy(_asyncToGenerator);
    var _regeneratorRuntime__default = /*#__PURE__*/_interopDefaultLegacy(_regeneratorRuntime);

    var wrap = brokerFactory.createBroker({
      parseArrayBuffer: function parseArrayBuffer(_ref) {
        var call = _ref.call;
        return /*#__PURE__*/function () {
          var _ref2 = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(arrayBuffer) {
            return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    return _context.abrupt("return", call('parse', {
                      arrayBuffer: arrayBuffer
                    }, [arrayBuffer]));

                  case 1:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));

          return function (_x) {
            return _ref2.apply(this, arguments);
          };
        }();
      }
    });
    var load = function load(url) {
      var worker = new Worker(url);
      return wrap(worker);
    };

    exports.load = load;
    exports.wrap = wrap;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
